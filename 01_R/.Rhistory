cms <- data.frame(t=as.integer(seq(0,nrow(temp_long))), x_t=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu.c=as.numeric(rep(0,nrow(temp_long)+1)), St=as.numeric(rep(0,nrow(temp_long)+1)))
C = 0
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
set.seed(1)
data(iris)
head(iris)
table(iris$Species)
library()
K_clus <- kmeans(iris[,-5], 3)
K_clus
table(iris$Species, K_clus$cluster) # 1 is virginca, 2 is setosa, 3 is versicolor
(50 + 36 + 48)/nrow(iris)
# make a function that take any combination of columns 1-4 into kmeans and give the accuracy
## NOte I had to do run trail to get the table right **
### Below 1 is Vessicolor, 2 is setosa, 3 is virginaca ** re_spec2 **
cust_km <- function(x=NA){
holdout <- c(x,5)
holdout <- holdout[!is.na(holdout)]
st.1<- kmeans(iris[,-holdout],3)
st.2<- table(iris$Species, st.1$cluster)
sum(apply(st.2,2,max))/nrow(iris)
}
cust_km()
cust_km(1)
cust_km(2)
cust_km(3)
cust_km(4)
cust_km(c(1,2))
cust_km(c(1,3))
km_2 <- kmeans(iris[-c(1,2,5)],3)
table(km_2$cluster, iris$Species)
km_2 <- kmeans(iris[-c(1,3,5)],3)
table(km_2$cluster, iris$Species)
crimes <- read.table("uscrime.txt",header = TRUE, stringsAsFactors = FALSE)
head(crimes)
plot(crimes$Crime)
head(crimes[order(crimes$Crime),])
head(crimes[order(crimes$Crime, decreasing = T),])
library(outliers)
grubbs.test(crimes$Crime, type=10)
temps <- read.table("temps.txt", header = T, stringsAsFactors = F)
head(temps)
length(names(temps))
names(temps) <- gsub("X", "", names(temps))
library(reshape2)
temp_long <- melt(temps, id.vars = "DAY", measure.vars = colnames(temps[,-1]), variable.name = "Year", value.name = "temp")
head(temp_long)
mu <- mean(temp_long$temp)
plot(temp_long$temp,type = "l")
cms <- data.frame(t=as.integer(seq(0,nrow(temp_long))), x_t=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu.c=as.numeric(rep(0,nrow(temp_long)+1)), St=as.numeric(rep(0,nrow(temp_long)+1)))
C = 0
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
set.seed(33)
data(iris)
head(iris)
table(iris$Species)
library()
K_clus <- kmeans(iris[,-5], 3)
K_clus
table(iris$Species, K_clus$cluster) # 1 is virginca, 2 is setosa, 3 is versicolor
(50 + 36 + 48)/nrow(iris)
# make a function that take any combination of columns 1-4 into kmeans and give the accuracy
## NOte I had to do run trail to get the table right **
### Below 1 is Vessicolor, 2 is setosa, 3 is virginaca ** re_spec2 **
cust_km <- function(x=NA){
holdout <- c(x,5)
holdout <- holdout[!is.na(holdout)]
st.1<- kmeans(iris[,-holdout],3)
st.2<- table(iris$Species, st.1$cluster)
sum(apply(st.2,2,max))/nrow(iris)
}
cust_km()
cust_km(1)
cust_km(2)
cust_km(3)
cust_km(4)
cust_km(c(1,2))
cust_km(c(1,3))
km_2 <- kmeans(iris[-c(1,2,5)],3)
table(km_2$cluster, iris$Species)
km_2 <- kmeans(iris[-c(1,3,5)],3)
table(km_2$cluster, iris$Species)
crimes <- read.table("uscrime.txt",header = TRUE, stringsAsFactors = FALSE)
head(crimes)
plot(crimes$Crime)
head(crimes[order(crimes$Crime),])
head(crimes[order(crimes$Crime, decreasing = T),])
library(outliers)
grubbs.test(crimes$Crime, type=10)
temps <- read.table("temps.txt", header = T, stringsAsFactors = F)
head(temps)
length(names(temps))
names(temps) <- gsub("X", "", names(temps))
library(reshape2)
temp_long <- melt(temps, id.vars = "DAY", measure.vars = colnames(temps[,-1]), variable.name = "Year", value.name = "temp")
head(temp_long)
mu <- mean(temp_long$temp)
plot(temp_long$temp,type = "l")
cms <- data.frame(t=as.integer(seq(0,nrow(temp_long))), x_t=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu=as.numeric(rep(0,nrow(temp_long)+1)), x_t.mu.c=as.numeric(rep(0,nrow(temp_long)+1)), St=as.numeric(rep(0,nrow(temp_long)+1)))
C = 0
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
mu
t.test(cms$x_t)
mu
C = 1
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
83.3-82.95
C = .4
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
83.65-82.95
C = .45
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
sd(cms$x_t)
83.65-82.95
C = .7
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
plot(cms$St, type = "l", main = "Change Detection Increasing")
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
index<-which(cms$St_dec >500)
index
temps(index)
temps_long[index,]
temp_long[index,]
View(temp_long)
View(cms[1500:1800])
View(cms[1500:1800,])
temp_long[1590:1620]
temp_long[1590:1620,]
temp_long[1650:1670,]
temp_long[650:770,]
cms[1500:2000]
View(cms[1500:2000],]
View(cms[1500:2000],])
View(cms[1500:2000,])
C = .1
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
dev.new()
dev.new()
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
C = .9
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
C = .95
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
plot.new()
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
#
#
#
#
library(dplyr)
temp_long[1400:1500,]
temp_long[1500:1550,]
temp_long[1570:1600,]
cms %>% filter(St > 600) %>% select(t,x_t,St)
cms %>% filter(St > 600) %>% select(t,x_t,St) %>% Slice(1:10)
cms %>% filter(St > 600) %>% select(t,x_t,St) %>% slice(1:10)
temp_long[1805:1820,]
temp_long[1790:1820,]
C = .7
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
plot(cms$St, type = "l", main = "Change Detection Increasing")
abline(v=600)
abline(h=600)
cms %>% filter(St > 600) %>% select(t,x_t,St)
temp_long[1800:1900,]
_
warm.ix <- cms %>% filter(St > 600) %>% select(t) %>% slice(1:20)
temp_long[warm.ix,]
warm.ix
class(warm.ix)
temp_long[warm.ix$t,]
temp_long[warm.ix$t,]
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
C = .95
cms$x_t[-1] <- temp_long$temp
cms$x_t.mu[-1] <- cms$x_t[-1]-mu
cms$x_t.mu.c[-1] <- cms$x_t.mu[-1] - C
# St, increasing
for(i in 2:nrow(cms)){cms$St[i] <- ifelse((cms$St[i-1] + cms$x_t.mu.c[i])>0, (cms$St[i-1] + cms$x_t.mu.c[i]), 0)}
# St, decreasing [St_dec]
cms$mu.x_t.C <- as.numeric(rep(0,nrow(temp_long)+1))
cms$St_dec <- as.numeric(rep(0,nrow(temp_long)+1))
cms$mu.x_t.C[-1] <-  mu - cms$x_t[-1] - C
for(i in 2:nrow(cms)){cms$St_dec[i] <- ifelse((cms$St_dec[i-1] + cms$mu.x_t.C[i])>0, (cms$St_dec[i-1] + cms$mu.x_t.C[i]), 0)}
plot(cms$St_dec, type = "l", main = "Change Detection Decreasing")
cool.ix <- cms %>% filter(St_dec > 400) %>% select(t)
cool.ix
temp_long[cool.ix$t,] %>% slice(1:20)
temp_long[cool.ix$t,]
q()
q()
ls()
getwd("C:/study")
setwd("C:/study")
list.dirs()
getwd(list.dirs()[7])
setwd(list.dirs()[8])
setwd("C:/study")
setwd("list.dirs()[7]")
setwd(list.dirs()[7])
list.files)()
list.files()
cps <- read.csv("CPSData.csv", header = T)
dim(cps)
tapply(cps$MetroAreaCode, cps$State, sum(is.na))
tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))})
a <- tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))})
tapply(cps$MetroAreaCode, cps$State, nrow)
tapply(cps$MetroAreaCode, cps$State, length)
b <- tapply(cps$MetroAreaCode, cps$State, length)
a
a=b
a <- tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))})
b <- tapply(cps$MetroAreaCode, cps$State, length)
a == b
tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))}) == tapply(cps$MetroAreaCode, cps$State, length)
sort(tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))}) == tapply(cps$MetroAreaCode, cps$State, length))
tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))})
tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))}) == 0
sort(tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))}) == 0)
sort(tapply(cps$MetroAreaCode, cps$State, function(x) {sum(is.na(x))}) == tapply(cps$MetroAreaCode, cps$State, length))
summary(cps$MetroAreaCode)
head(cps$MetroAreaCode)
tapply(cps$MetroAreaCode, cps$Region, length)
tapply(cps$MetroAreaCode, cps$Region, function(x){sum(is.na(x))})
table(cps$Region)
tapply(cps$MetroAreaCode, cps$Region, function(x){sum(is.na(x))})/table(cps$Region)
sort(tapply(cps$MetroAreaCode, cps$Region, function(x){sum(is.na(x))})/table(cps$Region))
tapply(cps$MetroAreaCode, cps$Region, mean)
tapply(cps$MetroAreaCode, cps$Region, mean, na.rm=T)
tapply(cps$MetroAreaCode, cps$State, mean, na.rm=T)
tapply(cps$MetroAreaCode, cps$State, function(x){mean(is.na(x))})
sort(tapply(cps$MetroAreaCode, cps$State, function(x){mean(is.na(x))}))
sapply(cps, class)
metro_codes <- read.csv("MetroAreaCodes.csv", header = T)
country_map <- read.csv("CountryCodes.csv", header = T)
str(metro_codes)
str(country_map)
CPS = merge(CPS, metro_codes, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
cps = merge(cps, metro_codes, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
str(cps)
summary(cps)
table(cps$MetroArea)
sort(table(cps$MetroArea))
summary(cps$Hispanic)
sort(table(cps$MetroArea[cps$Hispanic ==1]))
summary(cps$Hispanic)
tapply(cps$Hispanic, cps$MetroArea, mean)
sort(tapply(cps$Hispanic, cps$MetroArea, mean))
table(cps$MetroArea[cps$Race == "Asian"])
summary(cps$MetroArea)
head(cps$Race)
tapply(cps$Race, cps$MetroArea, function(x){mean(x=="Asian")})
sort(tapply(cps$Race, cps$MetroArea, function(x){mean(x=="Asian")}))
sort(tapply(cps$Race == "Asian", cps$MetroArea, mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm=T))
sort(tapply(cps$Education == "No high school diploma", cps$MetroArea, mean, na.rm=T))
sort(tapply(cps$Education == "No high school diploma", cps$MetroArea, mean, na.rm=T))
sort(tapply(cps$Education == "No high school diploma", cps$MetroArea, mean, na.rm=T), decreasing = T)
head(country_map)
head(cps)
cps <- merge(cps,country_map, by.x = "CountryofBirthCode", by.y = "Code", all.x = T)
cps <- merge(cps,country_map, by.x = "CountryOfBirthCode", by.y = "Code", all.x = T)
head(cps)
summary(cps)
table(cps$Country)
sort(table(cps$Country))
table(cps$MetroArea)
table(cps$MetroArea)=="New York-Northern New Jersey-Long Island, NY-NJ-PA"
sort(table(cps$MetroArea)=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
(names(table(cps$MetroArea))=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
which(names(table(cps$MetroArea))=="New York-Northern New Jersey-Long Island, NY-NJ-PA")
table(cps$Country)
2==2
2!=2
2!=1
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country != "United States", mean)
table(cps$Country[cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA"])
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, mean)
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, function(x){mean(x!=USSR)})
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, function(x){mean(x!=USSR, na.rm = T)})
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, mean, na.rm=T)
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country[cps$Country!="United States"], mean, na.rm=T)
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country[cps$Country!="United States"], mean, na.rm=T)
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, mean, na.rm=T)
a <- tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, mean, na.rm=T)
names(a)
a[names(a)=="United States"]
a[names(a)!="United States"]
sum(a[names(a)!="United States"])
a[names(a)!="United States"]
a[names(a)!="United States"][1]
class(a[names(a)!="United States"])
dim(a[names(a)!="United States"])
sum(a[names(a)!="United States"])
sum(a[names(a)!="United States"], na.rm=T)
a[names(a)!="United States"]
tapply(cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, mean, na.rm=T)
sum(a[names(a)!="United States"], na.rm=T)
tapply(cps$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, length, na.rm=T)
tapply(cps$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, length)
sum(tapply(cps$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, length))
prob.4.3_2 <- sum(prob.4.3_1, na.rm=T)
prob.4.3_1 <- tapply(cps$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", cps$Country, length)
prob.4.3_2 <- sum(prob.4.3_1, na.rm=T)
prob.4.3_1
prob.4.3_2
prob.4.3_1[names(prob.4.3_1 != "United States")]
prob.4.3_1[names(prob.4.3_1 == "United States")]
prob.4.3_1
prob.4.3_1 == "Wales"
names(prob.4.3_1) == "United States"
names(prob.4.3_1) != "United States"
prob.4.3_1[1]
prob.4.3_1[-149]
prob.4.3_1[-148]
names(prob.4.3_1) != "United States"
prob.4.3_1[names(prob.4.3_1) != "United States"]
sum(prob.4.3_1[names(prob.4.3_1) != "United States"], na.rm = T)
prob.4.3_2 <- sum(prob.4.3_1, na.rm=T) # Total number of NY obs excluding those that don't have a country of birth
prob.4.3_3 <- sum(prob.4.3_1[names(prob.4.3_1) != "United States"], na.rm = T) # sum of all those from NY area but not born in US, and excluding NA's
prob.4.3_2/prob.4.3_3
prob.4.3_3/prob.4.3_2
prob.4.3_3
sum(prob.4.3_1[names(prob.4.3_1) == "United States"], na.rm = T)
prob.4.3_1
---
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
---
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
---
pr <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
?subset
---
pr.4.3_1 <- subset(cps, cps$MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
names(cps)
---
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
---#
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA")
dim(pr.4.3_1)
head(pr.4.3_1)
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA" & !is.na(County))
pr.4.3_1 <- subset(cps, MetroArea =="New York-Northern New Jersey-Long Island, NY-NJ-PA" & !is.na(Country))
dim(pr.4.3_1)
pr.4.3_2 <- subset(pr.4.3_1, Country != "United States")
dim(pr.4.3_2)
nrow(pr.4.3_2)/nrow(pr.4.3_1)
table(cps$Country)
names(cps)
tapply(cps, Country == "India", MetroArea, length)
tapply(cps$Country == "India", cps$MetroArea, length)
sort(tapply(cps$Country == "India", cps$MetroArea, length))
sort(tapply(cps$Country == "India", cps$MetroArea, length, na.rm=T))
tapply(cps$Country == "India", cps$MetroArea, max))
tapply(cps$Country == "India", cps$MetroArea, max)
max(tapply(cps$Country == "India", cps$MetroArea, length)
max(tapply(cps$Country == "India", cps$MetroArea, length))
max(tapply(cps$Country == "India", cps$MetroArea, length))
max(tapply(cps$Country == "India", cps$MetroArea, length), na.rm = T)
which.max(tapply(cps$Country == "India", cps$MetroArea, length))
sort(tapply(cps$Country == "India", cps$MetroArea, length))
which.max(tapply(cps$Country == "India", cps$MetroArea, length))
which.max(tapply(cps$Country == "Brazil", cps$MetroArea, length))
which.max(tapply(cps$Country == "Somalia", cps$MetroArea, length))
sort(tapply(cps$Country == "Somalia", cps$MetroArea, length))
sort(tapply(cps$Country == "India", cps$MetroArea, length))
library(dplyr)
cps %>% filter(Country == "India") %>% group_by(MetroArea)
cps %>% filter(Country == "India") %>% group_by(MetroArea) %>% summarize(count=n())
cps %>% filter(Country == "India") %>% group_by(MetroArea) %>% summarize(count=n()) %>% arrange(count)
cps %>% filter(Country == "India") %>% group_by(MetroArea) %>% summarize(count=n()) %>% arrange(desc(count))
cps %>% filter(Country == "Brazil") %>% group_by(MetroArea) %>% summarize(count=n()) %>% arrange(desc(count))
cps %>% filter(Country == "Somalia") %>% group_by(MetroArea) %>% summarize(count=n()) %>% arrange(desc(count))
pr.4.4 <- subset(cps, country=="India" & Country != "United States")
pr.4.4 <- subset(cps, Country=="India")
dim(pr.4.4)
pr.4.4 <- subset(cps, Country=="India" & !is.na(Country))
dim(pr.4.4)
pr.4.4 <- subset(cps, Country=="India")
dim(pr.4.4)
table(pr.4.4$MetroArea)
sort(table(pr.4.4$MetroArea))
tapply(cps$Country, cps$MetroArea, function(x){max(x,na.rm=T)})
tapply(cps$Country, cps$MetroArea, function(x){sum(x,na.rm=T)})
tapply(cps$Country, cps$MetroArea, function(x){sum(x=="India")})
sort(tapply(cps$Country, cps$MetroArea, function(x){sum(x=="India")}))
sort(tapply(cps$Country == "India", cps$MetroArea,max ))
sort(tapply(cps$Country == "India", cps$MetroArea,sum ))
sort(tapply(cps$Country == "India", cps$MetroArea,sum, na.rm=T ))
R.version
