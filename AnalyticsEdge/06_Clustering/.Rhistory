lapply(T,'[[',1)
lapply(T,'[[',2)
lapply(T,'[[',3)
T[[1]][1],T[[3]][1])
grep(T[[1]][1],T[[3]][1])
T[[1]]
list(1,3,4)
list("1","3",as.character(c(1,2,4)))
list("1","3",as.character("1,2,4))
list("1","3","1 2 4")
t = list("1","3","1 2 4")
t
do.call(t,'[[')
do.call
do.call()
do.call('[[',t)
do.call('[',t)
do.call
?do.claa
do.call
?do.call
unlist(t)
t
t2 <- unlist(t)
t2[1]
t2[3]
class(t2)
is.vector(t2)
t8 <- list(1,3,c(1,2,4))
t
t8
unlist(t8)
length(t2)
length(unlist(t8))
lapply('[[', t8)
4
6
1 4 5 7 9 12
4
6
1 4 5 7 9 12
"4
6
1 4 5 7 9 12"
list=("4
6
1 4 5 7 9 12")
list("4
6
1 4 5 7 9 12")
list(strsplit("4
6
1 4 5 7 9 12","\n"))
(strsplit("4
6
1 4 5 7 9 12","\n"))
dim(strsplit("4
6
1 4 5 7 9 12","\n"))
dim((strsplit("4
6
1 4 5 7 9 12","\n")))
(strsplit("4
6
1 4 5 7 9 12","\n"))
length(strsplit("4
6
1 4 5 7 9 12","\n"))
a=(strsplit("4
6
1 4 5 7 9 12","\n"))
a
scan("4
6
1 4 5 7 9 12")
readLines("4
6
1 4 5 7 9 12")
readLines(file="4
6
1 4 5 7 9 12")
readLines(file=c("4
6
1 4 5 7 9 12"))
a=(strsplit("4
6
1 4 5 7 9 12","\n"))
a
strsplit("4
6
1 4 5 7 9 12","\n")[[1]]
as.list(strsplit("4
6
1 4 5 7 9 12","\n")[[1]])
strsplit("4
6
1 4 5 7 9 12")[[1]]
strsplit("4
6
1 4 5 7 9 12","\n")[[1]]
T <- as.list(strsplit("4
6
1 4 5 7 9 12","\n")[[1]])
T
T[[3]]
class(T[[3]])
is.vector(T[[3]])
T[[3]][1]
T[[3]]
paste0(T[[3]])
strsplit
?strsplit
strsplit(T[[3]])
strsplit(T[[3]]," ")
unlist(strsplit(T[[3]]," "))
grep(T[[1]],unlist(strsplit(T[[3]]," ")))
"21
100
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 312"
as.list(strsplit("21
100
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 312","\n"))
T <- as.list(strsplit("21
100
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 312","\n"))
grep(T[[1]],unlist(strsplit(T[[3]]," ")))
T
T <- as.list(strsplit("21
100
2 4 8 12 15 19 21 24 26 29 30 32 35 36 41 44 49 52 57 58 59 64 65 68 73 77 80 82 85 88 93 97 101 105 108 111 115 118 122 127 130 131 132 134 135 136 138 141 144 146 151 153 158 160 165 169 171 176 179 184 187 190 194 197 200 205 210 215 217 222 225 230 231 236 239 243 244 246 248 253 254 256 258 262 263 267 272 274 277 280 284 285 289 291 295 297 301 305 310 312","\n")[[1]])
T
grep(T[[1]],unlist(strsplit(T[[3]]," ")))
unlist(strsplit(T[[3]]," "))
?grep
as.numeric(unlist(strsplit(T[[3]]," ")))
grep(as.numeric(T[[1]]),as.numeric(unlist(strsplit(T[[3]]," "))))
grep(as.numeric(T[[1]]),as.numeric(unlist(strsplit(T[[3]]," "))), fixed = T)
which(unlist(strsplit(T[[3]]," ")) == T[[1]])
"1\n2 3\n4 5 6"
strsplit("1\n2 3\n4 5 6","\n")
strsplit("1\n2 3\n4 5 6","\n")[[1]]
unlist(strsplit("1\n2 3\n4 5 6","\n"))
as.list(unlist(strsplit("1\n2 3\n4 5 6","\n")))
as.list(unlist(strsplit("imkhnpqnhlvaxlmrsskbyyrhwfvgteubrelgubvdmrdmesfxkpykprunzpustowmvhupkqsyjxmnptkcilmzcinbzjwvxshubeln
wfnfdassvfugqjfuruwrdumdmvxpbjcxorettxmpcivurcolxmeagsdundjronoehtyaskpwumqmpgzmtdmbvsykxhblxspgnpgfzydukvizbhlwmaajuytrhxeepvmcltjmroibjsdkbqjnqjwmhsfopjvehhiuctgthrxqjaclqnyjwxxfpdueorkvaspdnywupvmy"),"\n"))
as.list(unlist(strsplit("imkhnpqnhlvaxlmrsskbyyrhwfvgteubrelgubvdmrdmesfxkpykprunzpustowmvhupkqsyjxmnptkcilmzcinbzjwvxshubeln
wfnfdassvfugqjfuruwrdumdmvxpbjcxorettxmpcivurcolxmeagsdundjronoehtyaskpwumqmpgzmtdmbvsykxhblxspgnpgfzydukvizbhlwmaajuytrhxeepvmcltjmroibjsdkbqjnqjwmhsfopjvehhiuctgthrxqjaclqnyjwxxfpdueorkvaspdnywupvmy","\n")))
T <- as.list(unlist(strsplit("imkhnpqnhlvaxlmrsskbyyrhwfvgteubrelgubvdmrdmesfxkpykprunzpustowmvhupkqsyjxmnptkcilmzcinbzjwvxshubeln
wfnfdassvfugqjfuruwrdumdmvxpbjcxorettxmpcivurcolxmeagsdundjronoehtyaskpwumqmpgzmtdmbvsykxhblxspgnpgfzydukvizbhlwmaajuytrhxeepvmcltjmroibjsdkbqjnqjwmhsfopjvehhiuctgthrxqjaclqnyjwxxfpdueorkvaspdnywupvmy","\n")))
T
one <- unlist(strsplit(T[[1]],""))
two <- unlist(strsplit(T[[2]],""))
fr_o <- length(one) - sum(one %in% two)
fr_t <- length(two) - sum(one %in% two)
ans <- fr_o + fr_t
ans
one
lenght(one)
length(one)
length(two)
two
sort(one)
sort(two)
two %% one
two %in% one
`%in%`
?`%in%`
match(one,two)
length(match(one,two))
sort(match(one,two))
one
two
sort(match(one,two))
sort(one)
sort(two)
ls
ls()
rm(list=setdiff(ls(),c(T,one,two)))
ls()
a
fib <- function(n){
if(n == 1){
t1
} else if(n == 2){
t2
} else {
fib(n - 2) + (fib(n-1))^2
}
}
t1=1
t2=1
fib(20)
options(digits=100000)
options(digits=100)
options(digits=22)
t1=1
t1=0
t2=1
fib(10)
format(fib(10),scientific = F
)
install.packages("RMySQL")
library(RMySQL)
drv <- dbDriver("MySQL")
ls()
library(RMySQL)
drv <- dbDriver("MySQL")
con = dbConnect(drv, user = "root", host = "localhost")
con = dbConnect(drv, user = "root", password = "lqsymM7&" host = "localhost")
con = dbConnect(drv, user = "root", password = "lqsymM7&", host = "localhost")
dbListTables(con)
con
dbListConnections()
dbListConnections(con)
drv
con = dbConnect(drv, user = "root", dbname = "lahman2016", host = "localhost")
con = dbConnect(drv, user = "root", dbname = "lahman2016", host = "localhost", password = "lqsymM7&")
dbListTables(con)
dbListFields(con,"batting")
query = "SELECT DISTINCT(yearID) FROM batting;"
dbGetQuery(con, query)
dbListTables(con)
dbGetQuery(con, query)
dbListFields(con,"batting")
dbListFields(con, AwardsPlayers)
dbListTables(con)
dbLIstFields(con, awardsplayers)
dbListFields(con, awardsplayers)
dbListFields(con, awardsplayers)
dbListFields(con,batting)
dbListFields(con, "awardsplayers")
con = dbConnect(drv, user = "root", dbname = "Sample-SQL-File-500-Rows", host = "localhost", password = "lqsymM7&")
con = dbConnect(drv, user = "root", dbname = "Sample-SQL-File-500-Rows", host = "localhost", password = "lqsymM7&")
con2 = dbConnect(drv, user = "root", dbname = "lahman2016", host = "localhost", password = "lqsymM7&")
dbListTables(con)
con2 = dbConnect(drv, user = "root", dbname = "500rows", host = "localhost", password = "lqsymM7&")
con2 = dbConnect(drv, user = "root", dbname = "cisp352", host = "localhost", password = "lqsymM7&")
dbListTables(con2)
con2 = dbConnect(drv, user = "root", dbname = "500", host = "localhost", password = "lqsymM7&")
dbListTables(con2)
con2 = dbConnect(drv, user = "root", dbname = "500rows", host = "localhost", password = "lqsymM7&")
con2 = dbConnect(drv, user = "root", dbname = "500rows", host = "localhost", password = "lqsymM7&")
con2 = dbConnect(drv, user = "root", dbname = "500", host = "localhost", password = "lqsymM7&")
con2 = dbConnect(drv, user = "root", dbname = "500", host = "localhost", password = "lqsymM7&")
dbListTables(con2)
dbListFields(con2,"user_details")
query = "SELECT DISTINCT(username) FROM user_details;"
dbGetQuery(con2, query)
con3 = dbConnect(drv, user = "root", dbname = "100", host = "localhost", password = "lqsymM7&")
dbListTables(con2)
dbListTables(con3)
dbListTables(con3)
dbListTables(con3)
dbListTables(con3)
dbListTables(con2)
dbListTables(con2)
dbListTables(con3)
rm(list=ls())
ls
ls()
dbListTables(con1)
dbListTables(con)
drv = dbDriver( "MySQL")
con = dbConnect( drv, user = "root", host = "localhost", dbname = "lahman2016", password = "lqsymM7&")
dbListTables(con)
dbListFields(con, "awardsplayers")
query = "SELECT DISTINCT(awardID) FROM awardsplayes;"
dbGetQuery(con, "SELECT DISTINCT(awardID) FROM awardsplayes;")
dbGetQuery(con, "SELECT DISTINCT(awardID) FROM awardsplayers;")
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, suppressWarnings = TRUE)
knitr
?knitr
knitr::opts_chunk$set(echo = TRUE,cache = TRUE, suppressMessages = TRUE, suppressWarnings = TRUE)
setwd("c:/study/Analy_Edge/04_CART")
# Load the gerber.csv to get started.
gerber <- read.csv("gerber.csv")
table(gerber$voting)['1']/sum(table(gerber$voting))
names(gerber)
sapply(gerber[c('hawthorne', 'civicduty','neighbors','self')], function(x) sum(x==1 & gerber$voting==1))/sapply(gerber[c('hawthorne', 'civicduty', 'neighbors','self')],sum)
# Or use tapply/by to split voting by each column
sapply(gerber[c('hawthorne', 'civicduty','neighbors','self')], function(x) by(gerber$voting,x,mean)) # IS THIS EFFICIENT
Logmodel <- glm(voting ~ hawthorne + civicduty + neighbors + self, data = gerber, family = 'binomial')
summary(Logmodel)
Logmodel.pred <- predict(Logmodel, type = "response")
table(gerber$voting, Logmoded.pred > .3)
ls()
Logmodel.pred <- predict(Logmodel, type = "response")
table(gerber$voting, Logmoded.pred > .3)
Logmodel.pred <- predict(Logmodel, type = "response")
table(gerber$voting, Logmodel.pred > .3)
sum(diag(table(gerber$voting, Logmodel.pred > .3)))/sum(table(gerber$voting, Logmodel.pred > .3))
sum(diag(table(gerber$voting, Logmoded.pred > .5)))/sum(table(gerber$voting, Logmoded.pred > .5))
sum(diag(table(gerber$voting, Logmodel.pred > .5)))/sum(table(gerber$voting, Logmodel.pred > .5))
table(gerber$voting)['0']/sum(table(gerber$voting))
# What is ... the percentage of people how did not vote in the baseline model, is the same as the accuracy of the logistic model above at threshold of 0.5.
# Compute the AUC
library(ROCR)
RocrPred <- prediction(Logmoded.pred, gerber$voting)
table(gerber$voting)['0']/sum(table(gerber$voting))
# What is ... the percentage of people how did not vote in the baseline model, is the same as the accuracy of the logistic model above at threshold of 0.5.
# Compute the AUC
library(ROCR)
RocrPred <- prediction(Logmodel.pred, gerber$voting)
auc <- as.numeric(performance(RocrPred,"auc")@y.values)
auc
library(rpart)
library(rpart.plot)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
prp(CARTmodel)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
summary(CARTmodel2)
prp(CARTmodel2)
head(gerber)
dim(gerber)
gerber[]
head(gerber)
gerber['civicduty'==1]
gerber['civicduty'==1,]
head(gerber[gerber$civicduty==1])
head(gerber[gerber$civicduty==1,])
head(gerber[c(4,5,6)])
head(gerber[gerber$civicduty == 1,c(4,6,7)])
colSums(gerber[gerber$civicduty == 1,c(4,6,7)])
mod2.pred <- predict(CARTmodel2, newdata = gerber[gerber$civicduty == 1, c(4,6,7)])
mod2.pred <- predict(CARTmodel2, newdata = gerber[gerber$civicduty == 1, c(4,6,7)])
mod2.pred <- predict(CARTmodel2, newdata = gerber[gerber$civicduty == 1, ])
summary(mod2.pred)
head(mod2.pred)
length(mod2.pred)
dim(gerber[gerber$civicduty ==1,])
prp(CARTmodel2)
names(gerber)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + control + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + control + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + control + sex, data=gerber, cp=0.0)
CARTmodel4 = rpart(voting ~ civicduty + hawthorne + self + neighbors + control + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
prp(CARTmodel4)
prp(CARTmodel3)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
CARTmodel4 = rpart(voting ~ civicduty + hawthorne + self + neighbors + control + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
prp(CARTmodel4)
prp(CARTmodel3)
prp(CARTmodel4)
CARTmodel0 <- rpart(voting ~ control, data = gerber, cp = 0.0)
CARtmodel00 <- rpart(voting ~ control + sex, data =gerber, cp = 0.0)
test <- predict(CARTmodel0 , data = gerber)
head(test)
test <- predict(CARTmodel0 , data = gerber[, gerber$control==1])
head(test)
test <- predict(CARTmodel0 , data = gerber[gerber$control==1,])
head(test)
prp(CARTmodel0)
prp(CARtmodel00)
test1 <- predict(CARtmodel00, data= gerber)
ls()
getwd()
c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
g <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
t <- c((0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0))
t = c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
g-t
g
t
t <- c (0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0)
g
t
g <- c(0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0)
g-t
(g-t)^2
sum((g-t)^2)
sqrt(2)
dim(emails)
download.file
getwd()
setwd("c:/Study/Analy_Edge/06_Clustering/")
download.file(url =  "http://files.grouplens.org/datasets/movielens/ml-100k/u.item", destfile = "./movieLens.txt")
list.files()
readLines("movieLens.txt", n = 10)
read.table("movieLens.txt", header = F, sep = "|", quote = "\"", nrows = 10)
a <- read.table("movieLens.txt", header = F, sep = "|", quote = "\"", nrows = 10)
dim(a)
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
dim(movies)
str(movies)
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
dim(movies)
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
dim(movies)
movies = unique(movies)
str(movies)
table(movies$Comedy)
table(movies$Western)
table(movies$Romance & movies$Drama)
distances = dist(movies[2:20], method = "euclidean")
clusterMovies = hclust(distances, method = "ward")
clusterMovies = hclust(distances, method = "ward.D2")
plot(clusterMovies)
dev.new()
plot(clusterMovies)
dev.new()
dev.new()
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
head(clusterGroups)
tail(clusterGroups)
dim(movies)
length(clusterGroups)
tapply(movies$Action, clusterGroups, mean)
a <- split(movies$Action, clusterGroups)
str(a)
lapply(a,sum)
sapply(a,sum)
sapply(a,sum)/1664
sum(sapply(a,sum))
sum(movies$Action)
sapply(a,sum)/249
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
cluster2 = subset(movies, clusterGroups==2)
ClusterMeans.ods
ls()
rm(list=ls())
# Unit 6 - Introduction to Clustering
# Video 6
# After following the steps in the video, load the data into R
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
# Add column names
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
# Remove unnecessary variables
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
# Remove duplicates
movies = unique(movies)
# Take a look at our data again:
str(movies)
########
#       Question
"Using the table function in R, please answer the following questions about the dataset 'movies'.
How many movies are classified as comedies?"
table(movies$Comedy)
"How many movies are classified as westerns?"
table(movies$Western)
"How many movies are classified as romance AND drama?"
table(movies$Romance & movies$Drama)
# Video 7
# Compute distances
distances = dist(movies[2:20], method = "euclidean")
# Hierarchical clustering
clusterMovies = hclust(distances, method = "ward.D2")
# Plot the dendrogram
plot(clusterMovies)
# Assign points to clusters
clusterGroups = cutree(clusterMovies, k = 10)
#Now let's figure out what the clusters are like.
# Let's use the tapply function to compute the percentage of movies in each genre and cluster
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
# We can repeat this for each genre. If you do, you get the results in ClusterMeans.ods
# Find which cluster Men in Black is in.
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
# Create a new data set with just the movies from cluster 2
cluster2 = subset(movies, clusterGroups==2)
ls()
names(movies)
cluster2 = subset(movies, clusterGroups==2)
cluster2$Title[1:10]
class(clusterGroups)
?dist
ClusMoves_k2 = cutree(dist(movies[2:20], method = "euclidean"))
ClusMoves_k2 = cutree(clusterMovies, k = 2)
tapply(movies$Action, Clus_k2, mean)
Clus_k2 = cutree(clusterMovies, k = 2)
tapply(movies$Action, Clus_k2, mean)
head(clus_k2)
head(Clus_k2)
temp <- subset(movies, Clus_k2 == 1)
head(temp)
temp <- subset(movies, Clus_k2 == 2)
head(temp2)
temp <- subset(movies, Clus_k2 == 1)
temp2 <- subset(movies, Clus_k2 == 2)
head(temp)
head(temp2)
tapply(movies$Comedy, Clus_k2, mean)
table(Clus_k2)
dim(temp2)
?hclust
clusterMovies = hclust(distances, method = "ward.D")
Clus_k2 = cutree(clusterMovies, k = 2)
temp <- subset(movies, Clus_k2 == 1)
temp2 <- subset(movies, Clus_k2 == 2)
head(temp)
head(temp2)
tapply(movies$Drama, Clus_k2, mean)
